# Netlify 配置文件

[build]
  # 构建命令
  command = "npm run build"
  
  # 发布目录
  publish = "dist"
  
  # 函数目录(如果使用 Netlify Functions)
  functions = "netlify/functions"

[build.environment]
  # Node.js 版本
  NODE_VERSION = "18"
  
  # npm 配置
  NPM_FLAGS = "--legacy-peer-deps"

# 构建优化
[build.processing]
  skip_processing = false

[build.processing.css]
  bundle = true
  minify = true

[build.processing.js]
  bundle = true
  minify = true

[build.processing.html]
  pretty_urls = true

[build.processing.images]
  compress = true

# 重定向规则 - SPA 路由支持
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
  force = false
  conditions = {Role = []}

# API 代理(如果需要)
[[redirects]]
  from = "/api/*"
  to = "https://api.yourdomain.com/:splat"
  status = 200
  force = true
  headers = {X-From = "Netlify"}

# 缓存控制
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"

[[headers]]
  for = "/*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/*.woff2"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/index.html"
  [headers.values]
    Cache-Control = "public, max-age=0, must-revalidate"
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "camera=(), microphone=(), geolocation=()"

[[headers]]
  for = "/*"
  [headers.values]
    X-Content-Type-Options = "nosniff"
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"

# 插件配置
[[plugins]]
  package = "@netlify/plugin-lighthouse"
  
  [plugins.inputs]
    output_path = "reports/lighthouse.html"

[[plugins]]
  package = "netlify-plugin-checklinks"
  
  [plugins.inputs]
    entryPoints = ["*.html"]
    recursive = true
    pretty = true

# 上下文特定配置
[context.production]
  environment = { NODE_ENV = "production" }

[context.deploy-preview]
  environment = { NODE_ENV = "preview" }

[context.branch-deploy]
  environment = { NODE_ENV = "branch" }

# 表单处理(如果需要)
# [forms]
#   honeypot = true

# 分割测试(A/B Testing)
# [[splits]]
#   name = "feature-test"
#   path = "/features/*"
#   branches = [
#     { branch = "main", weight = 50 },
#     { branch = "feature-branch", weight = 50 }
#   ]
