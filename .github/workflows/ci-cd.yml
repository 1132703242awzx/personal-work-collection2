# GitHub Actions CI/CD 配置
# 自动构建、测试和部署

name: CI/CD Pipeline

on:
  # 推送到主分支时触发
  push:
    branches: [main, develop]
  # Pull Request 时触发
  pull_request:
    branches: [main, develop]
  # 支持手动触发
  workflow_dispatch:

# 并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ==================
  # 代码检查和测试
  # ==================
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: 🎨 Check code formatting
        run: npm run format:check
        continue-on-error: true

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # ==================
  # 类型检查
  # ==================
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔎 Run TypeScript compiler
        run: npx tsc --noEmit

  # ==================
  # 构建
  # ==================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-test, typecheck]
    
    strategy:
      matrix:
        environment: [production, preview]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: ${{ matrix.environment }}
          VITE_APP_TITLE: ${{ secrets.VITE_APP_TITLE }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.environment }}
          path: dist/
          retention-days: 7

      - name: 📊 Analyze bundle size
        run: |
          npm run build -- --mode analyze
          du -sh dist/*
        continue-on-error: true

  # ==================
  # E2E 测试
  # ==================
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🧪 Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          start: npm run preview
          wait-on: 'http://localhost:4173'
          wait-on-timeout: 120
          browser: chrome
          record: false

      - name: 📸 Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          retention-days: 7

      - name: 🎥 Upload videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 7

  # ==================
  # Lighthouse 性能测试
  # ==================
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start preview server
        run: npm run preview &
        env:
          PORT: 4173

      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: 💡 Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4173
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ==================
  # 安全扫描
  # ==================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🛡️ Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ==================
  # 部署到 Vercel (Preview)
  # ==================
  deploy-vercel-preview:
    name: Deploy to Vercel (Preview)
    runs-on: ubuntu-latest
    needs: [build, lint-and-test]
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-preview
          path: dist/

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 💬 Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Preview deployed to: ${{ steps.deploy.outputs.url }}`
            })

  # ==================
  # 部署到 Vercel (Production)
  # ==================
  deploy-vercel-production:
    name: Deploy to Vercel (Production)
    runs-on: ubuntu-latest
    needs: [build, lint-and-test, typecheck]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://your-app.vercel.app
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-production
          path: dist/

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 📢 Create deployment notification
        run: |
          echo "✅ Deployed to production successfully!"

  # ==================
  # 部署到 Netlify (Production)
  # ==================
  deploy-netlify-production:
    name: Deploy to Netlify (Production)
    runs-on: ubuntu-latest
    needs: [build, lint-and-test, typecheck]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: netlify-production
      url: https://your-app.netlify.app
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-production
          path: dist/

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # ==================
  # 通知
  # ==================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-vercel-production]
    if: always()
    
    steps:
      - name: 📧 Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
